AWSTemplateFormatVersion: 2010-09-09
Description: 'pn-bff microservice'

Parameters:

  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  EnvironmentType:
    Type: String

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'

  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  VpcEgressSubnetsIds:
    Type: String
    Description: subnets where to install PN-CORE

  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  # OpenApi Bucket params
  MicroserviceBucketName:
    Type: String
    Default: ''
    Description: 'Name of the bucket where the microservice files are copied during deploy'

  MicroserviceBucketBaseKey:
    Type: String
    Default: ''
    Description: 'Base key of the microservice in the s3 bucket'

  # Heath Check parameters
  HealthCheckInterval:
    Description: Seconds between two health check
    Type: Number
    Default: 60

  HealthCheckTimeout:
    Description: health check timeout seconds
    Type: Number
    Default: 15
  
  HealthyThresholdCount:
    Description: |
      The number of consecutive health checks successes required before considering 
      an unhealthy target healthy. 
    Type: Number
    Default: 5
  
  UnhealthyThresholdCount:
    Description: |
      The number of consecutive health check failures required before considering a target unhealthy. 
    Type: Number
    Default: 2

  HealthCheckPath:
    Type: String
    Default: '/actuator/health'

  # Instance parameters
  # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
  # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
  # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
  # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
  # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
  CpuValue:
    Type: Number
    Default: 1024
    Description: Fargate virtual CPU quantity 1024 equals one vCPU

  # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
  # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
  # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
  # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
  # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
  MemoryAmount:
    Type: String
    Default: 2GB
    Description: memory amount reserved to the task pod.
    AllowedValues: [ 2GB, 4GB, 6GB, 8GB ]

  # Autoscaling parameters
  AutoscalingCheckPeriod:
    Default: 60
    Type: Number
    Description: minimum autoscaling number of tasks\

  AutoscalingDataPointN:
    Default: 1
    Type: Number
    Description: activate when N datapoint on M

  AutoscalingDataPointM:
    Default: 1
    Type: Number
    Description: activate when N datapoint on M

  AutoscalingThreshold:
    Default: 70
    Type: String
  
  MinTasksNumber:
    Default: 1
    Type: Number
    Description: minimum autoscaling number of tasks

  MaxTasksNumber:
    Default: 6
    Type: Number
    Description: maximum autoscaling number of tasks

  # Log group parameters
  EcsLogGroup:
    Type: String
    Description: 'Ecs log group name'

  LogAlarmStrategy:
    Type: String
    Default: 'FATAL'

  WebWafLimit:
    Default: 6000
    Type: Number
    Description: web waf limit

  EnhancedWebSecurityEnabled:
    Type: String
    Default: false
    Description: Enable additional WAF Web rules
    AllowedValues:
      - true
      - false

  # SelfCare parameters
  SelfCareBaseURL:
      Type: String
      Description: 'SelfCare base URL'
  SelfCareSendProdId:
      Type: String
      Description: 'SelfCare send prod id'

  # Logging parameters
  WireTapLogActivation:
    Type: String
    Default: false
    Description: Activation of wire logs
    AllowedValues:
      - true
      - false

  PnCronAnalyzer:
    Type: String
    Default: '-'
    Description: Cron for which you send the metric to CloudWatch

  # EFS parameters
  FargateEFSFileSystemID:
    Type: String
    Description: "EFS Filesystem"

  MountEfs:
    Type: String
    Default: false
    AllowedValues:
      - "true"
      - "false"

  #Auth fleet url
  AuthFleetBaseUrl:
    Type: String
    Description: 'AuthFleet base URL'

  # Lambdas
  DataIndexerLambdaName:
    Type: String
    Description: Name of the DataIndexer Lambda.

  DataIndexerLambdaMemory:
    Type: Number
    Default: 4096
    MinValue: 512
    MaxValue: 10240
    Description: Memory of the DataIndexer Lambda.

  DataIndexerLambdaRuntime:
    Type: String
    Default: nodejs20.x
    Description: Runtime of the DataIndexer Lambda.

 # Sender dashboard
  IndexesBucketArn:
    Type: String
    Description: PN bucket Arn of indexes files.

  IndexesBucketName:
    Type: String
    Description: PN bucket of index files.

  IndexesBucketRegion:
    Type: String
    Description: PN bucket region of index files.

  SenderDashboardDataIndexerAlarmThreshold:
    Type: Number
    # 8 minutes
    Default: 480000
    Description: Threshold in minutes of DataIndexer Lambda.

  SenderDashboardDataIndexerCron:
    Type: String
    Default: '0 16 * * ? *'
    Description: Cron to schedule the Lambda (UTC).

  # DataIndexer Env
  DlBucketName:
    Type: String
    Description: Name of data-lake bucket.
    Default: ''

  DlBucketRegion:
    Type: String
    Description: Default region for data-lake bucket.

  DlAssumeRoleArn:
    Type: String
    Description: ARN of the role Lambda will assume.
    Default: ''

  DlOverviewObjectKey:
    Type: String
    Description: S3 object key for overview file.

  DlFocusObjectKey:
    Type: String
    Description: S3 object key for focus focus.

  PnIndexObjectKey:
    Type: String
    Description: S3 index object key.

  RaddStoreRegistryLambdaName:
    Type: String
    Description: Name of the RaddStoreRegistry Lambda.

  RaddStoreRegistryLambdaMemory:
    Type: Number
    Default: 4096
    MinValue: 512
    MaxValue: 10240
    Description: Memory of the RaddStoreRegistry Lambda.

  RaddStoreRegistryLambdaRuntime:
    Type: String
    Default: nodejs20.x
    Description: Runtime of the RaddStoreRegistry Lambda.

  IndexesBucketRaddStoreRegistryPrefix:
    Type: String
    Description: Name of s3 bucket for generated csv

  WebLandingBucketName:
    Type: String
    Description: name of bucket for web-landing

  WebLandingBucketArn:
    Type: String
    Description: Arn of bucket for web-landing

  WebLandingBucketPrefix:
    Type: String
    Description: Folder to upload store registry csv
    Default: 'public/static/documents'

  RaddStoreRegistryFileName:
    Type: String
    Description: Name of csv file for store locator
    Default: 'radd-stores-registry'

  RaddStoreRegistryCsvConfigurationParameter:
    Type: String
    Description: Name of parameter in parameter store containing store locator csv configuration

  RaddStoreRegistryGenerateInterval:
    Type: Number
    Description: Time interval (days) for Store Locator generate csv
    Default: 7

  RaddStoreRegistryAlarmThreshold:
    Type: Number
    # 8 minutes
    Default: 480000
    Description: Threshold in minutes of DataIndexer Lambda.

  RaddStoreRegistrySendToWebLandingParameter:
    Type: String
    Description: name of parameter in parameter store to enable send to web landing

Conditions:
  CreateFakeDLRole:
    Fn::Or:
      - Fn::Equals: [!Ref EnvironmentType, dev]
      - Fn::Equals: [!Ref EnvironmentType, test]
      - Fn::Equals: [!Ref EnvironmentType, uat]

Resources:

  # PN-bff microservice
  PnBffMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        CpuValue: !Ref CpuValue
        MemoryAmount: !Ref MemoryAmount
        HealthCheckTimeout: !Ref HealthCheckTimeout
        HealthCheckInterval: !Ref HealthCheckInterval
        HealthyThresholdCount: !Ref HealthyThresholdCount
        UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
        HealthCheckPath: !Ref HealthCheckPath
        AutoscalingThreshold: !Ref AutoscalingThreshold
        AutoscalingCheckPeriod: !Ref AutoscalingCheckPeriod
        MinTasksNumber: !Ref MinTasksNumber
        MaxTasksNumber: !Ref MaxTasksNumber
        AutoscalingDataPointN: !Ref AutoscalingDataPointN
        AutoscalingDataPointM: !Ref AutoscalingDataPointM
        AutoscalingStrategy: REST-API
        MicroServiceUniqueName: !Sub '${ProjectName}-bff'
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGION=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry3: !Sub 'PN_CRON_ANALYZER=${PnCronAnalyzer}'
        ContainerEnvEntry4: !Sub 'WIRE_TAP_LOG=${WireTapLogActivation}'
        ContainerEnvEntry5: !Sub 'PN_BFF_DELIVERYBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry6: !Sub 'PN_BFF_APIKEYMANAGERBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry7: !Sub 'PN_BFF_EXTERNALREGISTRIESBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry8: !Sub 'PN_BFF_USERATTRIBUTESBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry9: !Sub 'PN_BFF_DOWNTIME_LOGS_BASE_URL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry10: !Sub 'PN_BFF_AUTHFLEET_BASE_URL=${AuthFleetBaseUrl}'
        ContainerEnvEntry11: !Sub 'PN_BFF_DELIVERY_PUSH_BASE_URL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry12: !Sub 'PN_BFF_MANDATE_BASE_URL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry13: !Sub 'PN_BFF_SELFCARE_BASE_URL=${SelfCareBaseURL}'
        ContainerEnvEntry14: !Sub 'PN_BFF_SELFCARE_SEND_PROD_ID=${SelfCareSendProdId}'
        # Sender dashboard
        ContainerEnvEntry15: !Sub 'PN_BFF_PN_BUCKET_NAME=${IndexesBucketName}'
        ContainerEnvEntry16: !Sub 'PN_BFF_PN_BUCKET_REGION=${IndexesBucketRegion}'
        ContainerEnvEntry17: !Sub 'PN_BFF_PN_INDEX_OBJECT_KEY=${PnIndexObjectKey}'
        ContainerEnvEntry18: !If [CreateFakeDLRole,
            !Sub 'PN_BFF_DL_BUCKET_NAME=${IndexesBucketName}',
            !Sub 'PN_BFF_DL_BUCKET_NAME=${DlBucketName}']
        ContainerEnvEntry19: !Sub 'PN_BFF_DL_BUCKET_REGION=${DlBucketRegion}'
        ContainerEnvEntry20: !If [CreateFakeDLRole,
            !Sub 'PN_BFF_DL_ASSUME_ROLE_ARN=arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-SenderDashboardFakeDLRole',
            !Sub 'PN_BFF_DL_ASSUME_ROLE_ARN=${DlAssumeRoleArn}']
        ContainerEnvEntry21: !Sub 'PN_BFF_DL_OVERVIEW_OBJECT_KEY=${DlOverviewObjectKey}'
        ContainerEnvEntry22: !Sub 'PN_BFF_DL_FOCUS_OBJECT_KEY=${DlFocusObjectKey}'
        MappedPaths: '/bff/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref VpcEgressSubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        TaskRoleManagedPolicyArn: !Ref PnBffMicroserviceTaskManagedPolicy
        EcsLogGroup: !Ref EcsLogGroup
        LogAlarmStrategyV1: !Ref LogAlarmStrategy
        EfsFilesystem: !Ref FargateEFSFileSystemID
        MountEfs: !Ref MountEfs
        WireTapLogActivation: !Ref WireTapLogActivation

  PnBffMicroserviceTaskManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Allow to write logs
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ecs/${ECSClusterName}/pn-bff:*'
          # Allow SenderDashboard S3 access
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub '${IndexesBucketArn}/*'
          # Allow assuming data lake role
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - !If [ CreateFakeDLRole,
                      !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-SenderDashboardFakeDLRole',
                      !Ref DlAssumeRoleArn ]

  BffMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service-openapi.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-bff'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'bff'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        OpenApiBucketName: !Ref MicroserviceBucketName
        OpenApiBucketKey: !Sub ${MicroserviceBucketBaseKey}/docs/openapi/aws/api-bff-WEB-aws.yaml

  # DataIndexer Lambda
  SenderDashboardDataIndexer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-bff-${DataIndexerLambdaName}
      Runtime: !Ref DataIndexerLambdaRuntime
      Handler: index.handler
      Role: !GetAtt SenderDashboardDataIndexerExecutionRole.Arn
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/senderDashboardDataIndexer.zip"
      Timeout: 900
      MemorySize: !Ref DataIndexerLambdaMemory
      Environment:
        Variables:
          DL_BUCKET_NAME: !If [CreateFakeDLRole, !Ref IndexesBucketName, !Ref DlBucketName]
          DL_BUCKET_REGION: !Ref DlBucketRegion
          DL_ASSUME_ROLE_ARN: !If [CreateFakeDLRole,
            !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-SenderDashboardFakeDLRole',
            !Ref DlAssumeRoleArn]
          DL_OVERVIEW_OBJECT_KEY: !Ref DlOverviewObjectKey
          DL_FOCUS_OBJECT_KEY: !Ref DlFocusObjectKey
          PN_BUCKET_NAME: !Ref IndexesBucketName
          PN_BUCKET_REGION: !Ref IndexesBucketRegion
          PN_INDEX_OBJECT_KEY: !Ref PnIndexObjectKey

  SenderDashboardDataIndexerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-bff-${DataIndexerLambdaName}LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessIndexesBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow SenderDashboard S3 access
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub ${IndexesBucketArn}/*
              # Allow assuming data lake role
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !If [ CreateFakeDLRole,
                          !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-SenderDashboardFakeDLRole',
                          !Ref DlAssumeRoleArn ]
    
  PnBffSenderDashboardFakeDLRole:
    Type: AWS::IAM::Role
    Condition: CreateFakeDLRole
    Properties:
      RoleName: !Sub ${ProjectName}-bff-SenderDashboardFakeDLRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
            Condition:
              ArnEquals:
                aws:PrincipalArn:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-TaskRole
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-bff-${DataIndexerLambdaName}LambdaRole
      Path: /
      Policies:
        - PolicyName: DatalakeS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow fake data-lake S3 access
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub ${IndexesBucketArn}/*

  # Fires the alarm when a duration threshold is reached
  SenderDashboardDataIndexerDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProjectName}-bff-${DataIndexerLambdaName}DurationAlarm
      AlarmDescription: !Sub "Alarm when Lambda function execution time exceeds ${SenderDashboardDataIndexerAlarmThreshold} minutes"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref SenderDashboardDataIndexerAlarmThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${ProjectName}-bff-${DataIndexerLambdaName}
      TreatMissingData: notBreaching

  # EventBridge Rule to trigger the Lambda
  SenderDashboardDataIndexerTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${ProjectName}-bff-SenderDashboardDataIndexerDailyTrigger
      ScheduleExpression: !Sub cron(${SenderDashboardDataIndexerCron})
      State: ENABLED
      Targets:
        - Id: TargetFunction
          Arn: !GetAtt SenderDashboardDataIndexer.Arn
          Input: '{}' 

  # Adding permissions to allow EventBridge to invoke the data indexer Lambda
  SenderDashboardDataIndexerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SenderDashboardDataIndexer.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SenderDashboardDataIndexerTrigger.Arn

  RaddStoreRegistryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-bff-${RaddStoreRegistryLambdaName}
      Runtime: !Ref RaddStoreRegistryLambdaRuntime
      Handler: index.handler
      Role: !GetAtt RaddStoreRegistryLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/raddStoreRegistryLambda.zip"
      MemorySize: !Ref RaddStoreRegistryLambdaMemory
      Timeout: 900
      Environment:
        Variables:
          BFF_BUCKET_NAME: !Ref IndexesBucketName
          BFF_BUCKET_PREFIX: !Ref IndexesBucketRaddStoreRegistryPrefix
          WEB_LANDING_BUCKET_NAME: !Ref WebLandingBucketName
          WEB_LANDING_BUCKET_PREFIX: !Ref WebLandingBucketPrefix
          FILE_NAME: !Ref RaddStoreRegistryFileName
          CSV_CONFIGURATION_PARAMETER: !Ref RaddStoreRegistryCsvConfigurationParameter
          GENERATE_INTERVAL: !Ref RaddStoreRegistryGenerateInterval
          RADD_STORE_SEND_TO_WEB_LANDING_PARAMETER: !Ref RaddStoreRegistrySendToWebLandingParameter
          RADD_ALT_BASE_URL: !Sub http://${ApplicationLoadBalancerDomain}:8080

  # Lambda function role
  RaddStoreRegistryLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-bff-${RaddStoreRegistryLambdaName}-ExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessIndexesBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucketVersions
                Resource:
                  - !Sub ${IndexesBucketArn}/${IndexesBucketRaddStoreRegistryPrefix}/*
        - PolicyName: AccessWebLandingBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub ${WebLandingBucketArn}/${WebLandingBucketPrefix}/*

  # Fires the alarm when a duration threshold is reached
  RaddStoreRegistryLambdaAlarms:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ProjectName}-bff-${RaddStoreRegistryLambdaName}-DurationAlarm
      AlarmDescription: !Sub "Alarm when Lambda function execution time exceeds ${RaddStoreRegistryAlarmThreshold} minutes"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref RaddStoreRegistryAlarmThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${ProjectName}-bff-${RaddStoreRegistryLambdaName}
      TreatMissingData: notBreaching

  #Scheduled Event Bridge Rule that send event to target lambda
  RaddStoreRegistryScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-bff-raddStoreRegistryScheduleRule'
      ScheduleExpression: !Sub rate(${RaddStoreRegistryRuleScheduleExpression})
      State: ENABLED
      Targets:
        - Arn: !GetAtt RaddStoreRegistryLambda.Arn
          Id: RaddStoreRegistryLambdaTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RaddStoreRegistryLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        - Arn: !GetAtt RaddStoreRegistryScheduledRule.Arn